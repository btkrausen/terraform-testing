name: Terraform Lab Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sundays

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Test all labs
  test-labs:
    name: Test Labs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # EXPLICITLY LIST YOUR LABS HERE
        # Replace these examples with your actual lab paths
        lab_path:
          - 'modules/tfb/aws/lab_01'
          - 'modules/tfb/aws/lab_02'
          - 'modules/tfb/aws/lab_03'
          - 'modules/tfb/aws/lab_04'
          - 'modules/tfb/aws/lab_05'
          - 'modules/tfb/aws/lab_05/developer'

    env:
      # Global environment variables
      TF_IN_AUTOMATION: "true"
      TF_CLI_ARGS: "-no-color"
      
      # Provider credentials from secrets (if needed)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform (Latest)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Prepare Working Directory
        id: prepare
        run: |
          # Create temporary working directory
          TEMP_DIR=$(mktemp -d)
          echo "temp_dir=$TEMP_DIR" >> $GITHUB_OUTPUT
          echo "Working directory: $TEMP_DIR"
          
          # Copy lab files to temp directory
          cp -r "${{ matrix.lab_path }}"/* "$TEMP_DIR"/
          
          echo "Preparing lab: ${{ matrix.lab_path }}"
          echo "Terraform version: $(terraform -version)"

      - name: Terraform Init
        id: init
        working-directory: ${{ steps.prepare.outputs.temp_dir }}
        run: terraform init -backend=false
      
      - name: Terraform Validate
        id: validate
        working-directory: ${{ steps.prepare.outputs.temp_dir }}
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        working-directory: ${{ steps.prepare.outputs.temp_dir }}
        continue-on-error: true
        run: |
          terraform plan -input=false -detailed-exitcode
          echo "plan_exit_code=$?" >> $GITHUB_OUTPUT
      
      - name: Check Plan Result
        id: check-plan
        run: |
          EXIT_CODE=${{ steps.plan.outputs.plan_exit_code }}
          
          if [ "$EXIT_CODE" = "0" ]; then
            echo "‚úÖ Plan successful - No changes required"
          elif [ "$EXIT_CODE" = "2" ]; then
            echo "‚úÖ Plan successful - Changes detected"
          else
            echo "‚ùå ERROR: Terraform plan failed with exit code $EXIT_CODE"
            exit 1
          fi
      
      - name: Cleanup
        if: always()
        run: |
          # Remove the temporary directory
          rm -rf ${{ steps.prepare.outputs.temp_dir }}
          echo "Cleanup completed"

  # Create a summary of failures (if any)
  notify-failures:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: test-labs
    if: always() && contains(needs.test-labs.result, 'failure')
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Failure Summary
        id: failure-summary
        run: |
          echo "### ‚ùå Terraform Lab Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Failed tests:" >> $GITHUB_STEP_SUMMARY
          
          FAILURE_INFO="The following lab tests failed:\n\n"
          
          # Get failed jobs from GitHub API
          FAILED_JOBS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs?filter=failed" | jq -r '.jobs[] | select(.name | contains("Test Labs")) | .name')
          
          echo "$FAILED_JOBS" | while read JOB; do
            LAB_PATH=$(echo "$JOB" | grep -oP 'lab_path=\K[^)]+' || echo "unknown")
            
            echo "- **$LAB_PATH**" >> $GITHUB_STEP_SUMMARY
            FAILURE_INFO+="- $LAB_PATH\n"
          done
          
          echo "FAILURE_INFO<<EOF" >> $GITHUB_ENV
          echo -e "$FAILURE_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      # Create issue for failures on main branch
      - name: Create GitHub Issue
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Terraform Lab Test Failures - ${new Date().toISOString().split('T')[0]}`,
              body: `## Terraform Lab Test Failures\n\n${process.env.FAILURE_INFO}\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`,
              labels: ['bug', 'terraform-compatibility']
            });
      
      # Comment on PR for failures
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ùå Terraform Lab Test Failures\n\n${process.env.FAILURE_INFO}\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            });