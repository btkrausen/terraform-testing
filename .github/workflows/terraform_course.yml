name: Terraform Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * 0" # Run weekly to catch issues with latest Terraform versions

permissions:
  contents: read
  issues: write # Needed to create issues on failure
  pull-requests: write # Needed to comment on PRs

jobs:
  # Validate all Terraform modules and environments
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - "1.10.0" # Supports slightly older version
          - "1.11.0" # Current stable version
          - "1.11.2" # Latest version
        directory:
          - "../modules/beginner_course/lab_01"
          - "../modules/beginner_course/lab_02"
          - "../modules/beginner_course/lab_03"
          - "../modules/beginner_course/lab_04"
          - "../modules/beginner_course/lab_05"
          - "../modules/beginner_course/lab_05/development"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ matrix.directory }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ${{ matrix.directory }}
        run: terraform validate

      - name: Terraform Format Check
        working-directory: ${{ matrix.directory }}
        run: terraform fmt -check
        continue-on-error: true # Don't fail the build for formatting issues

  # Run module-level tests
  module-tests:
    name: Module Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - "1.10.0" # Supports older version
          - "1.11.0" # Current stable version
          - "1.11.2" # Latest version
        module:
          - "modules/beginner_course/lab_01"
          - "modules/beginner_course/lab_02"
          - "modules/beginner_course/lab_03"
          - "modules/beginner_course/lab_04"
          - "modules/beginner_course/lab_05"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Run Module Tests
        id: module-test
        run: |
          chmod +x ./scripts/test.sh
          ./scripts/test.sh "${{ matrix.module }}" "${{ matrix.terraform }}"

      - name: Upload test log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.module }}-terraform-${{ matrix.terraform }}
          path: |
            .terraform.log
            test-output.log
          retention-days: 7

  # Run integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: module-tests
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - "1.8.*"
          - "1.9.*"
          - "1.10.*"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Run Integration Tests
        run: |
          for test_dir in tests/integration_tests/*/; do
            echo "Testing $(basename "$test_dir")"
            cd "$test_dir"
            terraform init -backend=false
            terraform validate
            terraform plan -detailed-exitcode
            cd - > /dev/null
          done

  # Test with the latest version of Terraform
  latest-terraform:
    name: Test with Latest Terraform
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform (Latest)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Version
        run: terraform version

      - name: Run All Tests
        run: |
          chmod +x ./scripts/test.sh
          ./scripts/test.sh

  # Create a notification summary for failures
  notify-failures:
    name: Notification for Test Failures
    runs-on: ubuntu-latest
    needs: [validate, module-tests, integration-tests, latest-terraform]
    if: failure()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect workflow failure information
        id: collect-failures
        run: |
          # Fetch failed jobs from the current workflow run
          FAILED_JOBS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs?filter=failed" | jq -r '.jobs[] | "- **" + .name + "** (Job #" + (.id|tostring) + ")"')

          echo "FAILED_JOBS<<EOF" >> $GITHUB_ENV
          echo "$FAILED_JOBS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Create a summary of the failures
          echo "### ‚ùå Terraform Test Failures Detected" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following jobs failed:" >> $GITHUB_STEP_SUMMARY
          echo "$FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Run URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

      - name: Create GitHub Issue for Failed Test
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = `## Terraform Compatibility Test Failure

            ### Failed Jobs:
            ${process.env.FAILED_JOBS}

            ### Details:
            * **Workflow Run**: [#${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            * **Commit**: [${context.sha.slice(0,7)}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
            * **Branch**: ${context.ref.replace('refs/heads/', '')}

            Please investigate these failures and fix the compatibility issues.`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Terraform Compatibility Test Failure - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['bug', 'terraform-compatibility']
            });

      - name: Comment on PR for Failed Test
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prComment = `## ‚ùå Terraform Compatibility Test Failure

            ### Failed Jobs:
            ${process.env.FAILED_JOBS}

            ### Details:
            * **Workflow Run**: [View Run Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

            Please fix these failures before merging.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: prComment
            });

  # Send notifications via various channels
  send-notifications:
    name: Send Failure Notifications
    runs-on: ubuntu-latest
    needs: notify-failures
    if: always() && needs.notify-failures.result == 'success'

    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "text": "üö® Terraform Compatibility Test Failure",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "üö® Terraform Compatibility Test Failure"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}\n*Workflow Run:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }