name: Terraform Lab Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sundays

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Find all labs
  find-labs:
    name: Find All Labs
    runs-on: ubuntu-latest
    outputs:
      all_labs: ${{ steps.list-all-labs.outputs.all_labs }}
    steps:
      - uses: actions/checkout@v4
      
      # List all labs
      - name: List all labs
        id: list-all-labs
        run: |
          ALL_LABS=$(find aws azure github -maxdepth 1 -mindepth 1 -type d -name "lab_*" | sed 's|/|_|g' | jq -R -s -c 'split("\n")[:-1]')
          echo "all_labs=$ALL_LABS" >> $GITHUB_OUTPUT
          echo "Found labs: $ALL_LABS"

  # Test all labs
  test-labs:
    name: Test Labs
    needs: find-labs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        lab: ${{ fromJSON(needs.find-labs.outputs.all_labs) }}
    
    env:
      # Global environment variables
      TF_IN_AUTOMATION: "true"
      TF_CLI_ARGS: "-no-color"
      
      # Provider credentials from secrets (if needed)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Convert lab ID back to directory path
      - name: Set lab path
        id: lab-path
        run: |
          LAB_PATH=$(echo "${{ matrix.lab }}" | sed 's|_|/|g')
          echo "lab_path=$LAB_PATH" >> $GITHUB_OUTPUT
          echo "Testing lab: $LAB_PATH"
      
      - name: Setup Terraform (Latest)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Run Lab Test
        id: test
        run: |
          # Create test script
          cat > test.sh << 'EOF'
          #!/bin/bash
          set -e

          LAB_PATH=$1
          echo "Testing lab: $LAB_PATH with latest Terraform version"
          echo "Terraform version: $(terraform -version)"

          # Create temporary working directory
          TEMP_DIR=$(mktemp -d)
          echo "Working in temporary directory: $TEMP_DIR"

          # Copy lab files to temp directory
          cp -r $LAB_PATH/* $TEMP_DIR/

          # Navigate to working directory
          cd $TEMP_DIR

          # Run tests
          echo "Initializing Terraform..."
          terraform init -backend=false -no-color

          echo "Validating Terraform configuration..."
          terraform validate -no-color

          echo "Running terraform plan..."
          # Run plan but don't fail if exit code is 2 (changes detected)
          terraform plan -no-color -input=false || true

          # Clean up
          cd - > /dev/null
          rm -rf $TEMP_DIR

          echo "‚úÖ Test completed successfully for $LAB_PATH"
          EOF
          
          chmod +x ./test.sh
          ./test.sh "${{ steps.lab-path.outputs.lab_path }}"
      
      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.lab }}
          path: |
            terraform*.log
            test-output.log
          retention-days: 7

  # Create a summary of failures (if any)
  notify-failures:
    name: Notify Test Failures
    runs-on: ubuntu-latest
    needs: test-labs
    if: always() && contains(needs.test-labs.result, 'failure')
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Failure Summary
        id: failure-summary
        run: |
          echo "### ‚ùå Terraform Lab Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Failed tests:" >> $GITHUB_STEP_SUMMARY
          
          FAILURE_INFO="The following lab tests failed:\n\n"
          
          # Get failed jobs from GitHub API
          FAILED_JOBS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs?filter=failed" | jq -r '.jobs[] | select(.name | contains("Test Labs")) | .name')
          
          echo "$FAILED_JOBS" | while read JOB; do
            LAB=$(echo "$JOB" | grep -oP 'lab_\w+' || echo "unknown")
            
            echo "- **$LAB**" >> $GITHUB_STEP_SUMMARY
            FAILURE_INFO+="- $LAB\n"
          done
          
          echo "FAILURE_INFO<<EOF" >> $GITHUB_ENV
          echo -e "$FAILURE_INFO" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      # Create issue for failures on main branch
      - name: Create GitHub Issue
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Terraform Lab Test Failures - ${new Date().toISOString().split('T')[0]}`,
              body: `## Terraform Lab Test Failures\n\n${process.env.FAILURE_INFO}\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`,
              labels: ['bug', 'terraform-compatibility']
            });
      
      # Comment on PR for failures
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ùå Terraform Lab Test Failures\n\n${process.env.FAILURE_INFO}\n\n[View workflow run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            });